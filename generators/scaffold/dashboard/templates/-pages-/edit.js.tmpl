import React from 'react';
import { Link } from 'components';
import { useParams, useNavigate } from 'react-router-dom';
import { useQuery, useMutation } from '@apollo/react-hooks';
import { gql } from 'apollo-boost';
import { {{.opts.Name.Pascalize}}Form } from 'components/src/{{.opts.Name.Dasherize.Pluralize}}';

const {{.opts.Name.Pascalize}}EditPage = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  const { loading, error, data } = useQuery(GET_{{.opts.Name.ToUpper}}, { variables: { id } });
  const [update{{.opts.Name.Pascalize}}] = useMutation(UPDATE_{{.opts.Name.ToUpper}});

  function handleSubmit(values, { setSubmitting }) {
    update{{.opts.Name.Pascalize}}({variables: { input: values }})
      .then((data) => {
        setSubmitting(false);
        navigate(`/{{.opts.Name.Dasherize.Pluralize}}/${id}`)
      })
      .catch((err) => {
        console.warn(err);
        setSubmitting(false);
      });
  }

  if (loading) return <p>Loading...</p>;
  if (error) return <p>Error :(</p>;

  return (
    <div>
      <h2>Edit {{.opts.Name.Pascalize}}</h2>
      <Link to="/{{.opts.Name.Dasherize.Pluralize}}">Back</Link>
      <{{.opts.Name.Pascalize}}Form
        initialValues={data}
        onSubmit={handleSubmit}
      />
    </div>
  );
};

const GET_{{.opts.Name.ToUpper}} = gql`
  query {{.opts.Name.Pascalize}}($id: ID!) {
    {{.opts.Name.ToLower}}(id: $id) {
      {{- range .opts.Attrs }}
        {{ .Name.Camelize }}
      {{- end }}
    }
  }
`

const UPDATE_{{.opts.Name.ToUpper}} = gql`
  mutation Update{{.opts.Name.Pascalize}}($input: Update{{.opts.Name.Pascalize}}Input!) {
    update{{.opts.Name.Pascalize}}(input: $input) {
      id
    }
  }
`;


export default {{.opts.Name.Pascalize}}EditPage;

import React from 'react';
import { gql, useQuery, useMutation } from '@apollo/client'
import { Link, useParams, useNavigate } from 'react-router-dom';
import { Loading, Failure, PageHeader } from 'components/src'
import { {{.opts.Name}}Form } from 'components/src/{{.opts.Name.Pluralize.ToLower}}';

const {{.opts.Name}}EditPage = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  const { loading, error, data, refetch } = useQuery(GET_{{.opts.Name.Underscore.ToUpper}}, { variables: { id } });
  const [update{{.opts.Name}}] = useMutation(UPDATE_{{.opts.Name.Underscore.ToUpper}});

  function handleSubmit(values, { setSubmitting }) {
    return update{{.opts.Name}}({variables: { input: { ...values, id } }})
      .then((resp) => {
        setSubmitting(false);
        navigate(`/{{.opts.Name.Pluralize.ToLower}}/${resp.data.update{{.opts.Name}}.id}`)
      })
      .catch((err) => {
        console.error(err);
        alert('Update failed');
        setSubmitting(false);
      });
  }

  if (loading) return <Loading />;
  if (error) return <Failure error={error} refetch={refetch} />;

  return (
    <div>
      <PageHeader title="Edit {{.opts.Name}}" extra={<Link to="/{{.opts.Name.Pluralize.ToLower}}">Back</Link>} />
      <{{.opts.Name}}Form
        initialValues={data.{{.opts.Name.Camelize}}}
        onSubmit={handleSubmit}
      />
    </div>
  );
};

const GET_{{.opts.Name.Underscore.ToUpper}} = gql`
  query {{.opts.Name}}($id: ID!) {
    {{.opts.Name.Camelize}}(id: $id) {
      id
      {{- range .opts.Attrs }}
        {{ .Name.Camelize }}
      {{- end }}
      createdAt
      updatedAt
    }
  }
`

const UPDATE_{{.opts.Name.Underscore.ToUpper}} = gql`
  mutation Update{{.opts.Name}}($input: Update{{.opts.Name}}Input!) {
    update{{.opts.Name}}(input: $input) {
      id
    }
  }
`;


export default {{.opts.Name}}EditPage;

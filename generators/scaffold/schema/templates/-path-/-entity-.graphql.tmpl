{{ $idType := "ID"}}
{{- range .opts.Attrs -}}
    {{- if eq .Name.Camelize.String "ID" }}
        {{ $idType = .GraphqlType  }}
    {{- end }}
{{- end }}

type {{ .opts.Name.String }} {
	{{- range .opts.Attrs }}
		{{ .Name.String | camelize  }}: {{ .GraphqlType }}
	{{- end }}
}

type {{.opts.Name.String}}Items {
	items: [{{ .opts.Name.String }}]!
	pagination: Pagination
}

input Create{{ .opts.Name.String }}Input {
	{{- range .opts.Attrs -}}
		{{- if ne .Name.Camelize.String "ID" }}
			{{ .Name.Camelize }}: {{ .GraphqlType }}
		{{- end }}
	{{- end }}
}

input Update{{ .opts.Name.String }}Input {
	{{- range .opts.Attrs -}}
		{{ .Name.Camelize }}: {{ .GraphqlType }}
	{{- end }}
}

input Delete{{ .opts.Name.String }}Input {
	ID: {{ $idType }}
}

extend type Query {
	{{ .opts.Name.Singularize.Camelize }}(id: {{ $idType }}): {{ .opts.Name }} @generated(type: "get")
	{{ .opts.Name.Pluralize.Camelize }}(page: Int, perPage: Int): {{.opts.Name.String}}Items @generated(type: "list")
}

extend type Mutation {
  create{{ .opts.Name }}(input: Create{{ .opts.Name }}Input!): {{ .opts.Name }} @generated(type: "create")
  update{{ .opts.Name }}(input: Update{{ .opts.Name }}Input!): {{ .opts.Name }} @generated(type: "update")
  delete{{ .opts.Name }}(input: Delete{{ .opts.Name.String }}Input!): {{ .opts.Name }} @generated(type: "delete")
}
